[gd_scene load_steps=10 format=2]

[ext_resource path="res://scripts/fire_ball.gd" type="Script" id=1]

[sub_resource type="SphereShape" id=1]

[sub_resource type="SphereMesh" id=2]
radius = 0.5
height = 1.0

[sub_resource type="Shader" id=3]
code = "shader_type spatial;

render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform vec2 amplitude = vec2(0.01, 0.05);
uniform vec2 frequency = vec2(3.0, 2.5);
uniform vec2 time_factor = vec2(2.0, 3.0);

uniform sampler2D uv_offset_texture : hint_black;
uniform vec2 uv_offset_scale = vec2(0.2, 0.2);
uniform float uv_offset_time_scale = 0.01;
uniform float uv_offset_amplitude = 0.2;

uniform sampler2D texturemap : hint_albedo;
uniform vec2 texture_scale = vec2(8.0, 4.0);

uniform sampler2D normalmap : hint_normal;
uniform float refraction = 0.05;

uniform float beer_factor = 1.0;

float height(vec2 pos, float time) {
	return (amplitude.x * sin(pos.x * frequency.x + time * time_factor.x)) + (amplitude.y * sin(pos.y * frequency.y + time * time_factor.y));
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	VERTEX.y += height(VERTEX.xz, TIME); // sample the height at the location of our vertex
	TANGENT = normalize(vec3(0.0, height(VERTEX.xz + vec2(0.0, 0.2), TIME) - height(VERTEX.xz + vec2(0.0, -0.2), TIME), 0.4));
	BINORMAL = normalize(vec3(0.4, height(VERTEX.xz + vec2(0.2, 0.0), TIME) - height(VERTEX.xz + vec2(-0.2, 0.0), TIME ), 0.0));
	NORMAL = cross(TANGENT, BINORMAL);
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/albedo = Color( 1, 0.631373, 0, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/emission = Color( 0.968627, 1, 0, 1 )
shader_param/emission_energy = 3.86
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/amplitude = Vector2( 0.01, 0.05 )
shader_param/frequency = Vector2( 3, 2.5 )
shader_param/time_factor = Vector2( 2, 3 )
shader_param/uv_offset_scale = Vector2( 0.2, 0.2 )
shader_param/uv_offset_time_scale = 0.01
shader_param/uv_offset_amplitude = 0.2
shader_param/texture_scale = Vector2( 8, 4 )
shader_param/refraction = 0.05
shader_param/beer_factor = 1.0

[sub_resource type="SpatialMaterial" id=8]
flags_transparent = true
albedo_color = Color( 1, 1, 1, 0.47451 )
metallic_specular = 1.0
roughness = 0.0
emission_enabled = true
emission = Color( 1, 0, 0, 1 )
emission_energy = 1.2
emission_operator = 0
emission_on_uv2 = false

[sub_resource type="SphereMesh" id=9]
material = SubResource( 8 )

[sub_resource type="ParticlesMaterial" id=5]
emission_shape = 1
emission_sphere_radius = 1.0
spread = 144.23
gravity = Vector3( 0, 0, 0 )
initial_velocity = 2.0
angle = 128.0

[sub_resource type="SphereMesh" id=6]
material = SubResource( 4 )
radius = 0.2
height = 0.2

[node name="KinematicBody" type="RigidBody"]
contacts_reported = 1
script = ExtResource( 1 )

[node name="Area" type="Area" parent="."]

[node name="CollisionShape" type="CollisionShape" parent="Area"]
shape = SubResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 2 )
material/0 = SubResource( 4 )

[node name="MeshInstance" type="MeshInstance" parent="MeshInstance"]
mesh = SubResource( 9 )
material/0 = null

[node name="Timer" type="Timer" parent="."]

[node name="Particles" type="Particles" parent="."]
emitting = false
one_shot = true
speed_scale = 3.7
explosiveness = 1.0
randomness = 1.0
visibility_aabb = AABB( -10.2312, -4, -12.9519, 20.4624, 8, 25.9037 )
process_material = SubResource( 5 )
draw_pass_1 = SubResource( 6 )

[node name="OmniLight" type="OmniLight" parent="."]
light_color = Color( 1, 0.843137, 0.372549, 1 )
[connection signal="body_entered" from="." to="." method="_on_KinematicBody_body_entered"]
[connection signal="body_entered" from="Area" to="." method="_on_Area_body_entered"]
